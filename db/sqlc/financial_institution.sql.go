// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: financial_institution.sql

package db

import (
	"context"
	"database/sql"
)

const createFinancialInstitution = `-- name: CreateFinancialInstitution :one
INSERT INTO financial_institutions (
  name,
  type,
  logo_url,
  code,
  active
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, name, type, logo_url, code, active, created_at
`

type CreateFinancialInstitutionParams struct {
	Name    string                   `json:"name"`
	Type    FinancialInstitutionType `json:"type"`
	LogoUrl string                   `json:"logo_url"`
	Code    string                   `json:"code"`
	Active  bool                     `json:"active"`
}

func (q *Queries) CreateFinancialInstitution(ctx context.Context, arg CreateFinancialInstitutionParams) (FinancialInstitution, error) {
	row := q.db.QueryRowContext(ctx, createFinancialInstitution,
		arg.Name,
		arg.Type,
		arg.LogoUrl,
		arg.Code,
		arg.Active,
	)
	var i FinancialInstitution
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LogoUrl,
		&i.Code,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFinancialInstitution = `-- name: DeleteFinancialInstitution :exec
DELETE FROM financial_institutions
WHERE id = $1
`

func (q *Queries) DeleteFinancialInstitution(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFinancialInstitution, id)
	return err
}

const getFinancialInstitution = `-- name: GetFinancialInstitution :one
SELECT id, name, type, logo_url, code, active, created_at FROM financial_institutions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFinancialInstitution(ctx context.Context, id int64) (FinancialInstitution, error) {
	row := q.db.QueryRowContext(ctx, getFinancialInstitution, id)
	var i FinancialInstitution
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LogoUrl,
		&i.Code,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getFinancialInstitutionByCode = `-- name: GetFinancialInstitutionByCode :one
SELECT id, name, type, logo_url, code, active, created_at FROM financial_institutions
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetFinancialInstitutionByCode(ctx context.Context, code string) (FinancialInstitution, error) {
	row := q.db.QueryRowContext(ctx, getFinancialInstitutionByCode, code)
	var i FinancialInstitution
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LogoUrl,
		&i.Code,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listFinancialInstitutions = `-- name: ListFinancialInstitutions :many
SELECT id, name, type, logo_url, code, active, created_at FROM financial_institutions
WHERE 
  ($3::financial_institution_type IS NULL OR type = $3::financial_institution_type)
  AND active = COALESCE($4, active)
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListFinancialInstitutionsParams struct {
	Limit  int32                        `json:"limit"`
	Offset int32                        `json:"offset"`
	Type   NullFinancialInstitutionType `json:"type"`
	Active sql.NullBool                 `json:"active"`
}

func (q *Queries) ListFinancialInstitutions(ctx context.Context, arg ListFinancialInstitutionsParams) ([]FinancialInstitution, error) {
	rows, err := q.db.QueryContext(ctx, listFinancialInstitutions,
		arg.Limit,
		arg.Offset,
		arg.Type,
		arg.Active,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialInstitution{}
	for rows.Next() {
		var i FinancialInstitution
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.LogoUrl,
			&i.Code,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFinancialInstitution = `-- name: UpdateFinancialInstitution :one
UPDATE financial_institutions
SET 
  name = COALESCE($2, name),
  logo_url = COALESCE($3, logo_url),
  active = COALESCE($4, active)
WHERE id = $1
RETURNING id, name, type, logo_url, code, active, created_at
`

type UpdateFinancialInstitutionParams struct {
	ID      int64          `json:"id"`
	Name    sql.NullString `json:"name"`
	LogoUrl sql.NullString `json:"logo_url"`
	Active  sql.NullBool   `json:"active"`
}

func (q *Queries) UpdateFinancialInstitution(ctx context.Context, arg UpdateFinancialInstitutionParams) (FinancialInstitution, error) {
	row := q.db.QueryRowContext(ctx, updateFinancialInstitution,
		arg.ID,
		arg.Name,
		arg.LogoUrl,
		arg.Active,
	)
	var i FinancialInstitution
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LogoUrl,
		&i.Code,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
