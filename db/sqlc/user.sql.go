// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, full_name, international_phone_number, token, avatar, online, fcmtoken) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online
`

type CreateUserParams struct {
	Username                 string `json:"username"`
	HashedPassword           string `json:"hashed_password"`
	FullName                 string `json:"full_name"`
	InternationalPhoneNumber string `json:"international_phone_number"`
	Token                    string `json:"token"`
	Avatar                   string `json:"avatar"`
	Online                   bool   `json:"online"`
	Fcmtoken                 string `json:"fcmtoken"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.InternationalPhoneNumber,
		arg.Token,
		arg.Avatar,
		arg.Online,
		arg.Fcmtoken,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.InternationalPhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhoneVerified,
		&i.Role,
		&i.Token,
		&i.Avatar,
		&i.Fcmtoken,
		&i.Online,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.InternationalPhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhoneVerified,
		&i.Role,
		&i.Token,
		&i.Avatar,
		&i.Fcmtoken,
		&i.Online,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online FROM users
WHERE international_phone_number = $1
LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, internationalPhoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, internationalPhoneNumber)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.InternationalPhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhoneVerified,
		&i.Role,
		&i.Token,
		&i.Avatar,
		&i.Fcmtoken,
		&i.Online,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online FROM users
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.InternationalPhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhoneVerified,
		&i.Role,
		&i.Token,
		&i.Avatar,
		&i.Fcmtoken,
		&i.Online,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online FROM users ORDER BY username LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.InternationalPhoneNumber,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.PhoneVerified,
			&i.Role,
			&i.Token,
			&i.Avatar,
			&i.Fcmtoken,
			&i.Online,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersOthers = `-- name: ListUsersOthers :many
SELECT username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online FROM users WHERE username != $1 ORDER BY username LIMIT $2 OFFSET $3
`

type ListUsersOthersParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListUsersOthers(ctx context.Context, arg ListUsersOthersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersOthers, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.InternationalPhoneNumber,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.PhoneVerified,
			&i.Role,
			&i.Token,
			&i.Avatar,
			&i.Fcmtoken,
			&i.Online,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET hashed_password = $2, full_name = $3, international_phone_number = $4, token = $5, avatar = $6 WHERE username = $1 RETURNING username, hashed_password, full_name, international_phone_number, password_changed_at, created_at, phone_verified, role, token, avatar, fcmtoken, online
`

type UpdateUserParams struct {
	Username                 string `json:"username"`
	HashedPassword           string `json:"hashed_password"`
	FullName                 string `json:"full_name"`
	InternationalPhoneNumber string `json:"international_phone_number"`
	Token                    string `json:"token"`
	Avatar                   string `json:"avatar"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.InternationalPhoneNumber,
		arg.Token,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.InternationalPhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.PhoneVerified,
		&i.Role,
		&i.Token,
		&i.Avatar,
		&i.Fcmtoken,
		&i.Online,
	)
	return i, err
}

const updateUserFCMToken = `-- name: UpdateUserFCMToken :exec
UPDATE users SET fcmtoken = $2 WHERE username = $1
`

type UpdateUserFCMTokenParams struct {
	Username string `json:"username"`
	Fcmtoken string `json:"fcmtoken"`
}

func (q *Queries) UpdateUserFCMToken(ctx context.Context, arg UpdateUserFCMTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserFCMToken, arg.Username, arg.Fcmtoken)
	return err
}

const updateUserOnline = `-- name: UpdateUserOnline :exec
UPDATE users SET online = $2 WHERE username = $1
`

type UpdateUserOnlineParams struct {
	Username string `json:"username"`
	Online   bool   `json:"online"`
}

func (q *Queries) UpdateUserOnline(ctx context.Context, arg UpdateUserOnlineParams) error {
	_, err := q.db.ExecContext(ctx, updateUserOnline, arg.Username, arg.Online)
	return err
}
