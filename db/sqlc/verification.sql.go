// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verification.sql

package db

import (
	"context"
	"time"
)

const createOTPVerification = `-- name: CreateOTPVerification :one
INSERT INTO otp_verifications (
    phone_number, 
    otp, 
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, phone_number, otp, expires_at, verified, created_at
`

type CreateOTPVerificationParams struct {
	PhoneNumber string    `json:"phone_number"`
	Otp         string    `json:"otp"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateOTPVerification(ctx context.Context, arg CreateOTPVerificationParams) (OtpVerification, error) {
	row := q.db.QueryRowContext(ctx, createOTPVerification, arg.PhoneNumber, arg.Otp, arg.ExpiresAt)
	var i OtpVerification
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Otp,
		&i.ExpiresAt,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestOTPVerification = `-- name: GetLatestOTPVerification :one
SELECT id, phone_number, otp, expires_at, verified, created_at FROM otp_verifications
WHERE phone_number = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestOTPVerification(ctx context.Context, phoneNumber string) (OtpVerification, error) {
	row := q.db.QueryRowContext(ctx, getLatestOTPVerification, phoneNumber)
	var i OtpVerification
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Otp,
		&i.ExpiresAt,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const markOTPAsVerified = `-- name: MarkOTPAsVerified :one
UPDATE otp_verifications
SET verified = true
WHERE id = $1
RETURNING id, phone_number, otp, expires_at, verified, created_at
`

func (q *Queries) MarkOTPAsVerified(ctx context.Context, id int32) (OtpVerification, error) {
	row := q.db.QueryRowContext(ctx, markOTPAsVerified, id)
	var i OtpVerification
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Otp,
		&i.ExpiresAt,
		&i.Verified,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPhoneVerified = `-- name: UpdateUserPhoneVerified :exec
UPDATE users
SET phone_verified = true
WHERE international_phone_number = $1
`

func (q *Queries) UpdateUserPhoneVerified(ctx context.Context, internationalPhoneNumber string) error {
	_, err := q.db.ExecContext(ctx, updateUserPhoneVerified, internationalPhoneNumber)
	return err
}
