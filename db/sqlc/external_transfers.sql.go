// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: external_transfers.sql

package db

import (
	"context"
	"database/sql"
)

const createExternalTransfer = `-- name: CreateExternalTransfer :one
INSERT INTO external_transfers (
  from_account_id,
  to_bank_code,
  to_account_number,
  recipient_name,
  amount,
  currency,
  reference,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, from_account_id, to_bank_code, to_account_number, recipient_name, amount, currency, status, reference, description, transaction_id, transaction_fees, error_message, created_at, updated_at
`

type CreateExternalTransferParams struct {
	FromAccountID   int64          `json:"from_account_id"`
	ToBankCode      string         `json:"to_bank_code"`
	ToAccountNumber string         `json:"to_account_number"`
	RecipientName   string         `json:"recipient_name"`
	Amount          int64          `json:"amount"`
	Currency        string         `json:"currency"`
	Reference       string         `json:"reference"`
	Description     sql.NullString `json:"description"`
}

func (q *Queries) CreateExternalTransfer(ctx context.Context, arg CreateExternalTransferParams) (ExternalTransfer, error) {
	row := q.db.QueryRowContext(ctx, createExternalTransfer,
		arg.FromAccountID,
		arg.ToBankCode,
		arg.ToAccountNumber,
		arg.RecipientName,
		arg.Amount,
		arg.Currency,
		arg.Reference,
		arg.Description,
	)
	var i ExternalTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToBankCode,
		&i.ToAccountNumber,
		&i.RecipientName,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Reference,
		&i.Description,
		&i.TransactionID,
		&i.TransactionFees,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExternalTransfer = `-- name: GetExternalTransfer :one
SELECT id, from_account_id, to_bank_code, to_account_number, recipient_name, amount, currency, status, reference, description, transaction_id, transaction_fees, error_message, created_at, updated_at FROM external_transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExternalTransfer(ctx context.Context, id int64) (ExternalTransfer, error) {
	row := q.db.QueryRowContext(ctx, getExternalTransfer, id)
	var i ExternalTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToBankCode,
		&i.ToAccountNumber,
		&i.RecipientName,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Reference,
		&i.Description,
		&i.TransactionID,
		&i.TransactionFees,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExternalTransferByReference = `-- name: GetExternalTransferByReference :one
SELECT id, from_account_id, to_bank_code, to_account_number, recipient_name, amount, currency, status, reference, description, transaction_id, transaction_fees, error_message, created_at, updated_at FROM external_transfers WHERE reference = $1 LIMIT 1
`

func (q *Queries) GetExternalTransferByReference(ctx context.Context, reference string) (ExternalTransfer, error) {
	row := q.db.QueryRowContext(ctx, getExternalTransferByReference, reference)
	var i ExternalTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToBankCode,
		&i.ToAccountNumber,
		&i.RecipientName,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Reference,
		&i.Description,
		&i.TransactionID,
		&i.TransactionFees,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExternalTransfers = `-- name: ListExternalTransfers :many
SELECT id, from_account_id, to_bank_code, to_account_number, recipient_name, amount, currency, status, reference, description, transaction_id, transaction_fees, error_message, created_at, updated_at FROM external_transfers
WHERE from_account_id = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type ListExternalTransfersParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListExternalTransfers(ctx context.Context, arg ListExternalTransfersParams) ([]ExternalTransfer, error) {
	rows, err := q.db.QueryContext(ctx, listExternalTransfers, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExternalTransfer{}
	for rows.Next() {
		var i ExternalTransfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToBankCode,
			&i.ToAccountNumber,
			&i.RecipientName,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Reference,
			&i.Description,
			&i.TransactionID,
			&i.TransactionFees,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExternalTransferStatus = `-- name: UpdateExternalTransferStatus :one
UPDATE external_transfers
SET
  status = $2,
  transaction_id = COALESCE($3, transaction_id),
  transaction_fees = COALESCE($4, transaction_fees),
  error_message = COALESCE($5, error_message),
  updated_at = now()
WHERE id = $1
RETURNING id, from_account_id, to_bank_code, to_account_number, recipient_name, amount, currency, status, reference, description, transaction_id, transaction_fees, error_message, created_at, updated_at
`

type UpdateExternalTransferStatusParams struct {
	ID              int64          `json:"id"`
	Status          string         `json:"status"`
	TransactionID   sql.NullString `json:"transaction_id"`
	TransactionFees sql.NullInt64  `json:"transaction_fees"`
	ErrorMessage    sql.NullString `json:"error_message"`
}

func (q *Queries) UpdateExternalTransferStatus(ctx context.Context, arg UpdateExternalTransferStatusParams) (ExternalTransfer, error) {
	row := q.db.QueryRowContext(ctx, updateExternalTransferStatus,
		arg.ID,
		arg.Status,
		arg.TransactionID,
		arg.TransactionFees,
		arg.ErrorMessage,
	)
	var i ExternalTransfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToBankCode,
		&i.ToAccountNumber,
		&i.RecipientName,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Reference,
		&i.Description,
		&i.TransactionID,
		&i.TransactionFees,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
