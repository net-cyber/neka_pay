// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type FinancialInstitutionType string

const (
	FinancialInstitutionTypeBank   FinancialInstitutionType = "bank"
	FinancialInstitutionTypeWallet FinancialInstitutionType = "wallet"
	FinancialInstitutionTypeMfi    FinancialInstitutionType = "mfi"
)

func (e *FinancialInstitutionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FinancialInstitutionType(s)
	case string:
		*e = FinancialInstitutionType(s)
	default:
		return fmt.Errorf("unsupported scan type for FinancialInstitutionType: %T", src)
	}
	return nil
}

type NullFinancialInstitutionType struct {
	FinancialInstitutionType FinancialInstitutionType `json:"financial_institution_type"`
	Valid                    bool                     `json:"valid"` // Valid is true if FinancialInstitutionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFinancialInstitutionType) Scan(value interface{}) error {
	if value == nil {
		ns.FinancialInstitutionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FinancialInstitutionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFinancialInstitutionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FinancialInstitutionType), nil
}

type Account struct {
	ID        int64     `json:"id"`
	Owner     string    `json:"owner"`
	Balance   int64     `json:"balance"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
}

type Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// can be negative or positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type FinancialInstitution struct {
	ID        int64                    `json:"id"`
	Name      string                   `json:"name"`
	Type      FinancialInstitutionType `json:"type"`
	LogoUrl   string                   `json:"logo_url"`
	Code      string                   `json:"code"`
	Active    bool                     `json:"active"`
	CreatedAt time.Time                `json:"created_at"`
}

type OtpVerification struct {
	ID          int32     `json:"id"`
	PhoneNumber string    `json:"phone_number"`
	Otp         string    `json:"otp"`
	ExpiresAt   time.Time `json:"expires_at"`
	Verified    bool      `json:"verified"`
	CreatedAt   time.Time `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Transfer struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	// must be positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	Username                 string    `json:"username"`
	HashedPassword           string    `json:"hashed_password"`
	FullName                 string    `json:"full_name"`
	InternationalPhoneNumber string    `json:"international_phone_number"`
	PasswordChangedAt        time.Time `json:"password_changed_at"`
	CreatedAt                time.Time `json:"created_at"`
	PhoneVerified            bool      `json:"phone_verified"`
	Role                     string    `json:"role"`
}
